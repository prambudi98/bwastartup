[1mdiff --git a/main.go b/main.go[m
[1mindex deb65e8..dd32e2e 100644[m
[1m--- a/main.go[m
[1m+++ b/main.go[m
[36m@@ -41,6 +41,7 @@[m [mfunc main() {[m
 	api := router.Group("/api/v1")[m
 	api.POST("/users", userHandler.RegisterUser)[m
 	api.POST("/sessions", userHandler.Login)[m
[32m+[m	[32mapi.POST("/email_checkers", userHandler.CheckEmailAvailibility)[m
 [m
 	router.Run()[m
 [m
[1mdiff --git a/user/handler/user.go b/user/handler/user.go[m
[1mindex 525d124..38453dd 100644[m
[1m--- a/user/handler/user.go[m
[1m+++ b/user/handler/user.go[m
[36m@@ -62,3 +62,36 @@[m [mfunc (h *userHandler) Login(c *gin.Context) {[m
 	response := helper.APIResponse("SuccessFully Login", http.StatusOK, "success", formatter)[m
 	c.JSON(http.StatusOK, response)[m
 }[m
[32m+[m
[32m+[m[32mfunc (h *userHandler) CheckEmailAvailibility(c *gin.Context) {[m
[32m+[m	[32mvar input user.CheckEmailInput[m
[32m+[m	[32merr := c.ShouldBindJSON(&input)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32merrors := helper.FormatValidationError(err)[m
[32m+[m		[32merrorMessage := gin.H{"errors": errors}[m
[32m+[m
[32m+[m		[32mresponse := helper.APIResponse("EMail Checking Failed", http.StatusUnprocessableEntity, "error", errorMessage)[m
[32m+[m		[32mc.JSON(http.StatusUnprocessableEntity, response)[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32misEmailAvailable, err := h.userService.IsEmailAvailable(input)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32merrorMessage := gin.H{"errors": "Server Error"}[m
[32m+[m		[32mresponse := helper.APIResponse("EMail Checking Failed", http.StatusUnprocessableEntity, "error", errorMessage)[m
[32m+[m		[32mc.JSON(http.StatusUnprocessableEntity, response)[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mvar metaMessage string[m
[32m+[m
[32m+[m	[32mdata := gin.H{"is_available": isEmailAvailable}[m
[32m+[m	[32mmetaMessage = "Email has been registered"[m
[32m+[m	[32mif isEmailAvailable {[m
[32m+[m		[32mmetaMessage = "Email is Available"[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mresponse := helper.APIResponse(metaMessage, http.StatusOK, "Succesed", data)[m
[32m+[m	[32mc.JSON(http.StatusOK, response)[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/user/input.go b/user/input.go[m
[1mindex 0d66ed0..6250d19 100644[m
[1m--- a/user/input.go[m
[1m+++ b/user/input.go[m
[36m@@ -11,3 +11,7 @@[m [mtype LoginInput struct {[m
 	Email    string `json:"email" binding:"required,email"`[m
 	Password string `json:"password" binding:"required"`[m
 }[m
[32m+[m
[32m+[m[32mtype CheckEmailInput struct {[m
[32m+[m	[32mEmail string `json:"email" binding:"required,email"`[m
[32m+[m[32m}[m
[1mdiff --git a/user/service.go b/user/service.go[m
[1mindex 3557d1c..d178ef5 100644[m
[1m--- a/user/service.go[m
[1m+++ b/user/service.go[m
[36m@@ -9,6 +9,7 @@[m [mimport ([m
 type Service interface {[m
 	RegisterUser(input RegisterUserInput) (User, error)[m
 	Login(input LoginInput) (User, error)[m
[32m+[m	[32mIsEmailAvailable(input CheckEmailInput) (bool, error)[m
 }[m
 [m
 type service struct {[m
[36m@@ -55,3 +56,19 @@[m [mfunc (s *service) Login(input LoginInput) (User, error) {[m
 	}[m
 	return user, nil[m
 }[m
[32m+[m
[32m+[m[32mfunc (s *service) IsEmailAvailable(input CheckEmailInput) (bool, error) {[m
[32m+[m	[32memail := input.Email[m
[32m+[m	[32muser, err := s.repository.FindByEmail(email)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn false, err[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif user.Id == 0 {[m
[32m+[m		[32mreturn true, nil[m
[32m+[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn false, nil[m
[32m+[m
[32m+[m[32m}[m
